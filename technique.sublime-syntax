%YAML 1.2
---
name: Technique
file_extensions: [t]
scope: source.technique

contexts:
    main:
        # skip blank lines

        - match: '^\s*$'

        # magic version string and top-level metadata

        - match: '^% technique v1'
          scope: entity.name.namespace.technique

        - match: '^!.*$'
          scope: entity.name.namespace.technique

        # identify a procedure definition and stack the function context

        - match: '^([a-z]\w*)(?=(?:\([\w\s,]+\))?\s+:)'
          captures:
              1: entity.name.function.technique
          push:
            - signature
            - definition
            - parameters
          # include: bail-out
          # push: function

        # top-level section declaration

        - match: '^([IVXLCMD]+\.)'
          captures:
              1: markup.list.numbered.technique

        # individual steps within a procedure

        - match: '^\s+(\d+\.)'
          captures:
              1: markup.list.numbered.technique

        # individual sub-steps within a procedure

        - match: '^\s+([a-z]\.)'
          captures:
              1: markup.list.numbered.technique

        # individual tasks within a procedure

        - match: '^\s+(\-)'
          captures:
              1: markup.list.unnumbered.technique

        - match: '(~)\s*([a-z]\w*)'
          captures:
              1: keyword.operator.assignment
              2: variable.parameter.technique

        - match: '^\s+(?=@\w+)'
          push:
            - role

        # procedure title if present

        - match: '^(#)\s*(.*)$'
          captures:
              1: punctuation.definition.heading.technique
              2: markup.heading.technique

        # procedure call

        - include: procedure-call

        # Sum type

        - match: (\')(?:\w(?:[\w\s]*\w)*\')
          scope: entity.name.constant.technique

        # Code block

        - match: '{'
          scope: punctuation.section.braces.begin
          push: code-block

        - match: '\s*\|'
          scope: punctuation.separator.constant.technique

    procedure-call:
        - match: '(<)([a-z]\w*)(>)'
          captures:
              1: punctuation.definition.generic.begin
              2: variable.function.technique
              3: punctuation.definition.generic.end
          push:
              - parameters
    parameters:
        - meta_scope: meta.parameters.technique

        - match: '\('
          scope: punctuation.definition.parameters.begin
        
        - match: '\)'
          scope: punctuation.definition.parameters.end
          pop: true
        
        - match: ','
          scope: punctuation.separator.parameters
        
        - match: '[a-z]\w*'
          scope: variable.parameter.technique

        - match: '(?=\s*[:~}])'
          pop: true
        
        - match: '$'
          pop: true

    definition:
        - match: ':'
          scope: punctuation.definition.function.technique
          pop: true

    signature:
        - meta_scope: meta.type.technique
        - match: '$'
          pop: true

        - match: ','
          scope: punctuation.separator.parameters

        - match: '\w+'
          scope: entity.name.type.technique

        - match: '\(\)'
          scope: entity.name.type.technique

        - match: '->'
          scope: keyword.operator

    role:
        - meta_scope: meta.trait
        - match: '@\w+'
          scope: entity.name.trait

        - match: '\+'
          scope: keyword.operator

        - match: '$'
          pop: true

    values:
        - include: procedure-call

        # numeric constants

        - match: \d+
          scope: constant.numeric

        # built-in function invocation

        - match: '([a-z]\w*)(?=\()(?!:)'
          captures:
              1: support.function.technique
          push: embedded

        # remaining identifiers are variables

        - match: '[a-z]\w*'
          scope: variable.parameter.technique

        - match: (\")(?=[^\"]*\")
          captures:
              1: punctuation.definition.string.begin
          push: value-string

    value-string:
        - meta_scope: meta.string

        - match: '"'
          scope: punctuation.definition.string.end
          pop: true

        - match: '{'
          scope: punctuation.section.braces.begin
          push: code-block

        - match: '[^"{]+'
          scope: string.quoted.double

    code-block:
        - meta_scope: meta.block

        - match: '}'
          scope: punctuation.section.braces.end
          pop: true

        - match: '(foreach)\s'
          captures:
              1: keyword.control.technique

        - match: '(in)\s'
          captures:
              1: keyword.control.technique

        - match: '(repeat)\s'
          captures:
              1: keyword.control.technique

        # Handle a tablet if encountered

        - match: '\['
          scope: punctuation.section.brackets.start
          push: tablet

        - include: values

    tablet:
        - meta_scope: meta.tablet.technique

        - match: '\]'
          scope: punctuation.section.brackets.end
          pop: true

        # an empty name is not a valid field but we want the highlighting to
        # for the rest of the tablet when writing.
        - match: '(\")([\w\d\s]*)(\")\s*(,)'
          captures:
              1: punctuation.definition.field.begin
              2: variable.other.tablet
              3: punctuation.definition.field.end
              4: punctuation.separator.parameters
          push: tablet-value

    tablet-value:
        - include: values

        - match: '$'
          pop: true

    embedded:
        - meta_scope: meta.embedded.technique

        - match: '\('
          scope: punctuation.definition.parameters.begin

        - match: '\)'
          scope: punctuation.definition.parameters.end
          pop: true

        - match: '(```)(\w+)'
          captures:
              1: punctuation.definition.string.begin
              2: storage.type.embedded
          push: embedded-string

        - match: '(```)'
          captures:
              1: punctuation.definition.string.begin
          push: embedded-string
        # - match: '[^\)]*'
        #   scope: string.quoted.other

    embedded-string:
        - meta_scope: meta.string

        - match: '```'
          scope: punctuation.definition.string.end
          pop: true

        - match: '[^`]+'
          scope: string.quoted.triple

    bail-out:
        - match: '(?=\S)'
          pop: true
